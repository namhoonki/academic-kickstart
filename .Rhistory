version(hugo)
library(blogdown)
blogdown::serve_site()
blogdown::hugo_version()
blogdown::hugo_version()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
library(blogdown)
blogdown::build_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
library(blogdown)
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
library(blogdown)
blogdown::serve_site()
library(blogdown)
blogdown::serve_site()
source('~/Dropbox/Github/academic-kickstart/Rscript_homepage.R', echo=TRUE)
blogdown::serve_site()
blogdown::serve_site()
library(blogdown)
blogdown::serve_site()
library(blogdown)
blogdown::serve_site()
library(blogdown)
blogdown::serve_site()
library(blogdown)
install.packages("blogdown")
library(blogdown)
blogdown::serve_site()
library(blogdown)
blogdown::serve_site()
library(blogdown)
blogdown::serve_site()
library(blogdown)
blogdown::serve_site()
blogdown::serve_site()
library(blogdown)
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
library(blogdown)
blogdown::serve_site()
blogdown::serve_site()
library(blogdown)
blogdown::serve_site()
blogdown::build_site()
library(blogdown)
blogdown::serve_site()
blogdown::build_site()
library(blogdown)
blogdown::serve_site()
blogdown::build_site()
library(blogdown)
blogdown::serve_site()
library(blogdown)
blogdown::serve_site()
blogdown::build_site()
library(blogdown)
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
library(blogdown)
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
library(blogdown)
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
library(blogdown)
blogdown::serve_site()
blogdown::build_site()
library(blogdown)
blogdown::serve_site()
# input Stata file
library(foreign)
library(lmtest)
library(car)
library(plm)
mydata <- read.dta("/Users/Namhoon/Google Drive/PSM&incentive/oral test (1.24).dta")
library(png)
library(stats)
library(effects)
library(mgcv)
library(rcompanion)
psm.data<-subset(mydata[,229:333])
psm.data
colnames(psm.data)
boxplot(psm.data$inform~psm.data$Exp_type)
model.k<-glm(inform~B+A+B*psm_pcf+psm_pcf*A+psm_pcf+int_pcf+ext_pcf+year_in_gov+female+age+white+educ+staff, data=mydata, family = "binomial")
summary(model.k)
model.k5<-glm(inform~+psm_pcf+B+A+interaction.B+interaction.A+int_pcf*B+int_pcf*A+int_pcf+ext_pcf+year_in_gov+female+age+white+educ+staff, data=mydata, family = "binomial")
# num_points: Total number of points for which a marginal effect is calculated - increase to make confidence bounds appear smoother
# conf: Size of confidence interval around coefficient estimates - 0-1, default is .95 (95% confidence)
# mean: Mark the mean mediator value by a vertical red line
# median: Mark the median mediator value by a vertical blue line
# alph: Transparency level of the histogram plot - 0-100, decrease to make the histogram more transparent
# rugplot: Include a rug plot of the mediator values below the figure
# histogram: Include a histogram of mediator values behind the figure - only plotted if minimum="min" and maximum="max"
# title: Title of the plot
# xlabel: Label of the X axis
# ylabel: Label of the Y axis
interaction_plot_continuous <- function(model, effect, moderator, interaction, varcov="default", minimum="min", maximum="max", incr="default", num_points = 50, conf=.95, mean=FALSE, median=FALSE, alph=80, rugplot=T, histogram=T, title="Marginal effects plot", xlabel="Value of moderator", ylabel="Estimated marginal coefficient"){
# Define a function to make colors transparent
makeTransparent<-function(someColor, alpha=alph){
newColor<-col2rgb(someColor)
apply(newColor, 2, function(curcoldata){rgb(red=curcoldata[1], green=curcoldata[2],
blue=curcoldata[3],alpha=alpha, maxColorValue=255)})
}
# Extract Variance Covariance matrix
if (varcov == "default"){
covMat = vcovHC(model,method = "arellano")
}else{
covMat = varcov
}
# Extract the data frame of the model
mod_frame = model.frame(model)
# Get coefficients of variables
beta_1 = model$coefficients[[effect]]
beta_3 = model$coefficients[[interaction]]
# Set range of the moderator variable
# Minimum
if (minimum == "min"){
min_val = min(mod_frame[[moderator]])
}else{
min_val = minimum
}
# Maximum
if (maximum == "max"){
max_val = max(mod_frame[[moderator]])
}else{
max_val = maximum
}
# Check if minimum smaller than maximum
if (min_val > max_val){
stop("Error: Minimum moderator value greater than maximum value.")
}
# Determine intervals between values of the moderator
if (incr == "default"){
increment = (max_val - min_val)/(num_points - 1)
}else{
increment = incr
}
# Create list of moderator values at which marginal effect is evaluated
x_2 <- seq(from=min_val, to=max_val, by=increment)
# Compute marginal effects
delta_1 = beta_1 + beta_3*x_2
# Compute variances
var_1 = covMat[effect,effect] + (x_2^2)*covMat[interaction, interaction] + 2*x_2*covMat[effect, interaction]
# Standard errors
se_1 = sqrt(var_1)
# Upper and lower confidence bounds
z_score = qnorm(1 - ((1 - conf)/2))
upper_bound = delta_1 + z_score*se_1
lower_bound = delta_1 - z_score*se_1
# Determine the bounds of the graphing area
max_y = max(upper_bound)
min_y = min(lower_bound)
# Make the histogram color
hist_col = makeTransparent("grey")
# Initialize plotting window
plot(x=c(), y=c(), ylim=c(min_y, max_y), xlim=c(min_val, max_val), xlab=xlabel, ylab=ylabel, main=title, cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
# Plot estimated effects
lines(y=delta_1, x=x_2)
lines(y=upper_bound, x=x_2, lty=2)
lines(y=lower_bound, x=x_2, lty=2)
# Add a dashed horizontal line for zero
abline(h=0, lty=3)
# Add a vertical line at the mean
if (mean){
abline(v = mean(mod_frame[[moderator]]), lty=2, col="red")
}
# Add a vertical line at the median
if (median){
abline(v = median(mod_frame[[moderator]]), lty=3, col="blue")
}
# Add Rug plot
if (rugplot){
rug(mod_frame[[moderator]])
}
# Add Histogram (Histogram only plots when minimum and maximum are the min/max of the moderator)
if (histogram & minimum=="min" & maximum=="max"){
par(new=T)
hist(mod_frame[[moderator]], axes=F, xlab="", ylab="",main="", border=hist_col, col=hist_col)
}
}
# effect: name of the "effect" variable in the interaction (marginal effect plotted on y-axis) - character string
# moderator: name of the moderating variable in the interaction (plotted on x-axis) - character string - Variable must be binary (0-1)
# interaction: name of the interaction variable in the model object - character string
## Optional
# varcov: Variance-Covariance matrix - if default, then taken from the model object using vcov()
# conf: Size of confidence interval around coefficient estimates - 0-1, default is .95 (95% confidence)
# title: Title of the plot
# xlabel: Label of the X axis
# ylabel: Label of the Y axis
# factor_labels: Labels for each of the two moderator values - default = "0" and "1"
interaction_plot_binary <- function(model, effect, moderator, interaction, varcov="default", conf=.95, title="Marginal effects plot", xlabel="Value of moderator", ylabel="Estimated marginal coefficient", factor_labels=c(0,1)){
# Extract Variance Covariance matrix
if (varcov == "default"){
covMat = vcovHC(model,method = "arellano")
}else{
covMat = varcov
}
# Extract the data frame of the model
mod_frame = model.frame(model)
# Get coefficients of variables
beta_1 = model$coefficients[[effect]]
beta_3 = model$coefficients[[interaction]]
# Create list of moderator values at which marginal effect is evaluated
x_2 <- c(0,1)
# Compute marginal effects
delta_1 = beta_1 + beta_3*x_2
# Compute variances
var_1 = covMat[effect,effect] + (x_2^2)*covMat[interaction, interaction] + 2*x_2*covMat[effect, interaction]
# Standard errors
se_1 = sqrt(var_1)
# Upper and lower confidence bounds
z_score = qnorm(1 - ((1 - conf)/2))
upper_bound = delta_1 + z_score*se_1
lower_bound = delta_1 - z_score*se_1
# Determine the bounds of the graphing area
max_y = max(upper_bound)
min_y = min(lower_bound)
# Initialize plotting window
plot(x=c(), y=c(), ylim=c(min_y, max_y), xlim=c(-.5, 1.5), xlab=xlabel, ylab=ylabel, main=title, xaxt="n")
# Plot points of estimated effects
points(x=x_2, y=delta_1, pch=16)
# Plot lines of confidence intervals
lines(x=c(x_2[1], x_2[1]), y=c(upper_bound[1], lower_bound[1]), lty=1)
points(x=c(x_2[1], x_2[1]), y=c(upper_bound[1], lower_bound[1]), pch=c(25,24), bg="black")
lines(x=c(x_2[2], x_2[2]), y=c(upper_bound[2], lower_bound[2]), lty=1)
points(x=c(x_2[2], x_2[2]), y=c(upper_bound[2], lower_bound[2]), pch=c(25,24), bg="black")
# Label the axis
axis(side=1, at=c(0,1), labels=factor_labels)
# Add a dashed horizontal line for zero
abline(h=0, lty=3)
}
ThreewayME.f <- function(M,X,Z,W,xlab,ylab,lloc,Min,Q1,Mean,Q3,Max,level)
{
## Variables must be in the following order: y = x z w (control variables here) xz xw zw xzw .  Of course, the model can include as many control variables as you need; the following code specifically uses just the variables we want for the interaction.  As long as you get the first three variables in correct order, R will correctly order the interaction terms.
## M = an object of type "lm," "glm," or other estimation -- i.e. the object that contains the regression estimation you seek to plot
## X = the variable whose effect on Y you seek to plot
## Z = the first moderating variable (will be positioned on the X-axis of the plot)
## W = the second moderating variable (the lines on the plot)
## xlab = Label for x-axis (in quotes)
## ylab = label for y-axis (in quotes)
## lloc = location of the legend for the plot, use values like "bottomleft"
## Min, Q1, Mean, Q3, Max = titles for each of these quartiles to be put in the legend -- i.e. "Min Q88" (titles must be in quotes)
## level = to set the confidence level.  Two options (don't put these in quotes): 95, 90.  Stars will show on lines that are significant at the level you set.  If you do not put in either option, stars will show on all lines.
## Example: ThreewayME.f(estimation.lm,ses,edu,pop,"Education levels","Effect of SES on Civil War","bottomleft","Min Pop","1Q Pop","Mean Pop","3Q Pop","Max Pop",90)
S <- summary(M)
N <- c(1:20)
#     ################################################################  #
#       Create 20 equally spaced values in a vector between min         #
#       and max on the Z variable                                       #
#     ################################################################  #
zmin <- rep(min(Z,na.rm=TRUE), 20)
zmax <- rep(max(Z, na.rm=TRUE), 20)
Znew <- (((N-1)/(20-1))*(zmax-zmin))+zmin
#     ################################################################  #
#       Generate the values of W for which you want to calculate the    #
#       marginal effect (and standard errors) of X on Y.                #
#     ################################################################  #
W0 <- quantile(W,   0, na.rm=TRUE)
W1 <- quantile(W, .25, na.rm=TRUE)
W2 <- quantile(W, .50, na.rm=TRUE)
W3 <- quantile(W, .75, na.rm=TRUE)
W4 <- quantile(W,   1, na.rm=TRUE)
#     ################################################################  #
#       Grab elements of the coefficient and variance-covariance matrix #
#       that are required to calculate the marginal effect and standard #
#       errors.                                                         #
#     ################################################################  #
H <- head(S$coefficients,4)
T <- tail(S$coefficients,4)
b <- rbind(H,T)
Vcov <- vcovHC(M,method = "arellano")
Vcov <- as.data.frame(Vcov)
Vcov1 <- Vcov[,c(1:4)]
Vcov2 <- Vcov[,-c(3:0-length(Vcov))]
Vcov <- cbind(Vcov1,Vcov2)
Vh <- head(Vcov,4)
Vt <- tail(Vcov,4)
V <- rbind(Vh,Vt)
b1 <- b[2,1]
b2 <- b[3,1]
b3 <- b[4,1]
b4 <- b[5,1]
b5 <- b[6,1]
b6 <- b[7,1]
b7 <- b[8,1]
varb1 <- V[2,2]
varb2 <- V[3,3]
varb3 <- V[4,4]
varb4 <- V[5,5]
varb5 <- V[6,6]
varb6 <- V[7,7]
varb7 <- V[8,8]
covb1b4 <- V[5,2]
covb1b5 <- V[6,2]
covb1b7 <- V[8,2]
covb4b5 <- V[6,5]
covb4b7 <- V[8,5]
covb5b7 <- V[8,6]
#     ################################################################  #
#       We want to calculate the marginal effect of X on Y for all      #
#       Z values of the modifying variable Z. We also want to           #
#       calculate this marginal effect as Z changes for specific values #
#       of the second modifying variable W.  In the code below, we      #
#       calculate the marginal effect of X on Y for all values of Z     #
#       when W=0, when W=1, when W=2, when W=3, and when W=4.           #
#     ################################################################  #
conb0 <- b1+b4*Znew+b5*W0+b7*(Znew*W0)
conb1 <- b1+b4*Znew+b5*W1+b7*(Znew*W1)
conb2 <- b1+b4*Znew+b5*W2+b7*(Znew*W2)
conb3 <- b1+b4*Znew+b5*W3+b7*(Znew*W3)
conb4 <- b1+b4*Znew+b5*W4+b7*(Znew*W4)
#     ################################################################  #
#       Calculate the standard errors for the marginal effect of X on Y #
#       for all Z values of the modifying variable Z. Do this for the   #
#       case when W=0, when W=1, when W=2, when W=3, and when W=4.      #
#     ################################################################  #
conse0 <- sqrt(varb1
+ varb4*(Znew^2) + varb5*(W0^2) + varb7*(Znew^2)*(W0^2)
+ 2*Znew*covb1b4 + 2*W0*covb1b5 + 2*Znew*W0*covb1b7 + 2*Znew*W0*covb4b5
+ 2*W0*(Znew^2)*covb4b7 + 2*(W0^2)*Znew*covb5b7)
conse1 <- sqrt(varb1
+ varb4*(Znew^2) + varb5*(W1^2) + varb7*(Znew^2)*(W1^2)
+ 2*Znew*covb1b4 + 2*W1*covb1b5 + 2*Znew*W1*covb1b7 + 2*Znew*W1*covb4b5
+ 2*W1*(Znew^2)*covb4b7 + 2*(W1^2)*Znew*covb5b7)
conse2 <- sqrt(varb1
+ varb4*(Znew^2) + varb5*(W2^2) + varb7*(Znew^2)*(W2^2)
+ 2*Znew*covb1b4 + 2*W2*covb1b5 + 2*Znew*W2*covb1b7 + 2*Znew*W2*covb4b5
+ 2*W2*(Znew^2)*covb4b7 + 2*(W2^2)*Znew*covb5b7)
conse3 <- sqrt(varb1
+ varb4*(Znew^2) + varb5*(W3^2) + varb7*(Znew^2)*(W3^2)
+ 2*Znew*covb1b4 + 2*W3*covb1b5 + 2*Znew*W3*covb1b7 + 2*Znew*W3*covb4b5
+ 2*W3*(Znew^2)*covb4b7 + 2*(W3^2)*Znew*covb5b7)
conse4 <- sqrt(varb1
+ varb4*(Znew^2) + varb5*(W4^2) + varb7*(Znew^2)*(W4^2)
+ 2*Znew*covb1b4 + 2*W4*covb1b5 + 2*Znew*W4*covb1b7 + 2*Znew*W4*covb4b5
+ 2*W4*(Znew^2)*covb4b7 + 2*(W4^2)*Znew*covb5b7)
#     ################################################################  #
#                           Create t statistics                         #
#     ################################################################  #
t0 <- conb0/conse0
t1 <- conb1/conse1
t2 <- conb2/conse2
t3 <- conb3/conse3
t4 <- conb4/conse4
#     ################################################################  #
#       Make a `shadow' variable that is missing if the t score is not  #
#       larger than the critical level of significance you want.        #
#     ################################################################  #
ci <- NA
ci[level==95] <- 1.96
ci[level==90] <- 1.645
stars.df <- data.frame(consb0=conb0,consb1=conb1,consb2=conb2,consb3=conb3,consb4=conb4,t0=t0,t1=t1,t2=t2,t3=t3,t4=t4)
stars.df$consb0[abs(stars.df$t0)<ci] <- NA
stars.df$consb1[abs(stars.df$t1)<ci] <- NA
stars.df$consb2[abs(stars.df$t2)<ci] <- NA
stars.df$consb3[abs(stars.df$t3)<ci] <- NA
stars.df$consb4[abs(stars.df$t4)<ci] <- NA
#     ################################################################  #
#       Generate a string variable called txt that is designated with  #
#       a star.                                                         #
#     ################################################################  #
txt <- c("*")
#     ################################################################  #
#       Graph the marginal effect of X on Y across the desired range of #
#       the modifying variable Z. Do this for when W=0, when W=1, when  #
#       W=2, when W=3, and when W=4.                                    #
#     ################################################################  #
plot(c(Znew,Znew,Znew,Znew,Znew,Znew,Znew,Znew,Znew,Znew), c(conb0,stars.df$consb0,conb1,stars.df$consb1,conb2,stars.df$consb2,conb3,stars.df$consb3,conb4,stars.df$consb4), type="n",xlab=xlab,ylab=ylab)+rug(jitter(Z))
lines(Znew,conb0,col="blue")
text(x=Znew,y=stars.df$consb0,labels=txt)
lines(Znew,conb1,col="red")
text(x=Znew,y=stars.df$consb1,labels=txt)
lines(Znew,conb2,col="forest green")
text(x=Znew,y=stars.df$consb2,labels=txt)
lines(Znew,conb3,col="yellow")
text(x=Znew,y=stars.df$consb3,labels=txt)
lines(Znew,conb4,col="brown")
text(x=Znew,y=stars.df$consb4,labels=txt)
legend(lloc,legend=c(Min,Q1,Mean,Q3,Max),col=c("blue","red","forest green","yellow","brown"),lty = c("solid"))
abline(h=0)
}
####loess smothing
####
logitloess <- function(x, y, s) {
logit <- function(pr) {
log(pr/(1-pr))
}
if (missing(s)) {
locspan <- 0.7
} else {
locspan <- s
}
loessfit <- predict(loess(y~x,span=locspan))
pi <- pmax(pmin(loessfit,0.9999),0.0001)
logitfitted <- logit(pi)
plot(x, logitfitted, ylab="logit")
}
#fisher exact test
fisher.test<-matrix(NA,3,2)
colnames(fisher.test)<-c("no","yes")
rownames(fisher.test)<-c("promotion treatment","financial treatment","no-treatment")
fisher.test[1,1]<-15
fisher.test[1,2]<-12
fisher.test[2,1]<-36
fisher.test[2,2]<-30
fisher.test[3,1]<-28
fisher.test[3,2]<-25
fisher.test(fisher.test)
pairwiseNominalIndependence(fisher.test,
fisher = TRUE,
gtest  = FALSE,
chisq  = FALSE,
digits = 3)
mydata$interaction.A<-mydata$A*mydata$psm_pcf
mydata$interaction.B<-mydata$B*mydata$psm_pcf
model.k<-glm(inform~psm_pcf+B+A+interaction.B+interaction.A+int_pcf+ext_pcf+year_in_gov+female+age+white+educ+staff, data=mydata, family = "binomial")
summary(model.k)
model.k1<-glm(inform~psm_pcf+B+A+int_pcf+ext_pcf+year_in_gov+female+age+white+educ+staff, data=mydata, family = "binomial")
summary(model.k1)
interaction_plot_binary(model.k, "psm_pcf", "A", "interaction.A", varcov="default", conf=.95, title="Marginal effects plot", xlabel="Promotion Incentive Treatment", ylabel="Estimated marginal coefficient", factor_labels=c(0,1))
par(new=TRUE)
interaction_plot_binary(model.k, "psm_pcf", "B", "interaction.B", varcov="default", conf=.95, title="Marginal effects plot", xlabel="Financial Incentive Treatment", ylabel="Estimated marginal coefficient", factor_labels=c(0,1))
###
onlytreatment<-subset(mydata, C!=1)
onlytreatment$interaction.A<-onlytreatment$A*onlytreatment$psm_pcf
onlytreatment$interaction.B<-onlytreatment$B*onlytreatment$psm_pcf
model.k0<-glm(inform~psm_pcf+B+interaction.B+int_pcf+ext_pcf+year_in_gov+female+age+white+educ+staff, data=onlytreatment, family = "binomial")
summary(model.k0)
model.k0.0<-glm(inform~psm_pcf+B+int_pcf+ext_pcf+year_in_gov+female+age+white+educ+staff, data=onlytreatment, family = "binomial")
summary(model.k0.0)
par(mar=c(5,12,5,12))
interaction_plot_continuous(model.k0, "B", "psm_pcf", "interaction.B", varcov="default", minimum="min", maximum="max", incr="default", num_points = 50, conf=.9, mean=FALSE, median=FALSE, alph=80, rugplot=T, histogram=T, title="Marginal effects of PSM with Financial Treatment with 90% CI", xlabel="PSM", ylabel="Estimated marginal coefficient")
dev.off()
par(mar=c(5,12,5,12))
interaction_plot_binary(model.k0, "psm_pcf", "B", "interaction.B", varcov="default", conf=.95, title="Marginal effects plot", xlabel="Financial Incentive Treatment", ylabel="Estimated marginal coefficient", factor_labels=c("promotion incentive", "financial incentive"))
dev.off()
par(mar=c(5,12,5,12))
interaction_plot_continuous(model.k, "A", "psm_pcf", "interaction.A", varcov="default", minimum="min", maximum="max", incr="default", num_points = 50, conf=.9, mean=FALSE, median=FALSE, alph=80, rugplot=T, histogram=T, title="Marginal effects of PSM with Promotion Treatment with 90% CI", xlabel="PSM", ylabel="Estimated marginal coefficient")
dev.off()
par(mar=c(5,12,5,12))
interaction_plot_continuous(model.k, "B", "psm_pcf", "interaction.B", varcov="default", minimum="min", maximum="max", incr="default", num_points = 50, conf=.9, mean=FALSE, median=FALSE, alph=80, rugplot=T, histogram=T, title="Marginal effects of PSM with Financial Treatment with 90% CI", xlabel="PSM", ylabel="Estimated marginal coefficient")
dev.off()
###
###predicted probability
###
model.k2<-glm(inform~psm_pcf+B+A+B*psm_pcf+A*psm_pcf+int_pcf+ext_pcf+year_in_gov+female+age+white+educ+staff, data=mydata, family = "binomial")
summary(model.k2)
newdata0 <- with(mydata, data.frame(psm_pcf = seq(-2,2,0.01), int_pcf=mean(int_pcf, na.rm=TRUE), ext_pcf=mean(ext_pcf, na.rm=TRUE),year_in_gov=mean(year_in_gov, na.rm=TRUE),female=mean(female, na.rm=TRUE), age=mean(age, na.rm=TRUE),white=mean(white, na.rm=TRUE),educ=mean(educ, na.rm=TRUE),staff=mean(staff, na.rm=TRUE), A=0, B=0, C=1))
newdata <- with(mydata, data.frame(psm_pcf = seq(-2,2,0.01), int_pcf=mean(int_pcf, na.rm=TRUE), ext_pcf=mean(ext_pcf, na.rm=TRUE),year_in_gov=mean(year_in_gov, na.rm=TRUE),female=mean(female, na.rm=TRUE), age=mean(age, na.rm=TRUE),white=mean(white, na.rm=TRUE),educ=mean(educ, na.rm=TRUE),staff=mean(staff, na.rm=TRUE), A=1, B=0, C=0))
newdata1 <- with(mydata, data.frame(psm_pcf = seq(-2,2,0.01), int_pcf=mean(int_pcf, na.rm=TRUE), ext_pcf=mean(ext_pcf, na.rm=TRUE),year_in_gov=mean(year_in_gov, na.rm=TRUE),female=mean(female, na.rm=TRUE), age=mean(age, na.rm=TRUE),white=mean(white, na.rm=TRUE),educ=mean(educ, na.rm=TRUE),staff=mean(staff, na.rm=TRUE), A=0,B=1,C=0))
example.data <- with(mydata, data.frame(psm_pcf=mean(psm_pcf, na.rm=TRUE), int_pcf=mean(int_pcf, na.rm=TRUE), ext_pcf=mean(ext_pcf, na.rm=TRUE),year_in_gov=mean(year_in_gov, na.rm=TRUE),female=mean(female, na.rm=TRUE), age=mean(age, na.rm=TRUE),white=mean(white, na.rm=TRUE),educ=mean(educ, na.rm=TRUE),staff=mean(staff, na.rm=TRUE), A=0,B=0,C=1))
preds.exp <- predict(model.k2, example.data, type="response", se.fit=TRUE)
predf.exp <- preds.exp$fit # predicted
lower.exp <- preds.exp$fit - (1.96*preds.exp$se.fit) # lower bounds
upper.exp <- preds.exp$fit + (1.96*preds.exp$se.fit) # upper bounds
example.data1 <- with(mydata, data.frame(psm_pcf=mean(psm_pcf, na.rm=TRUE), int_pcf=mean(int_pcf, na.rm=TRUE), ext_pcf=mean(ext_pcf, na.rm=TRUE),year_in_gov=mean(year_in_gov, na.rm=TRUE),female=mean(female, na.rm=TRUE), age=mean(age, na.rm=TRUE),white=mean(white, na.rm=TRUE),educ=mean(educ, na.rm=TRUE),staff=mean(staff, na.rm=TRUE), A=0,B=1,C=0))
preds.exp1 <- predict(model.k2, example.data1, type="response", se.fit=TRUE)
predf.exp1 <- preds.exp1$fit # predicted
lower.exp1 <- preds.exp1$fit - (1.96*preds.exp1$se.fit) # lower bounds
upper.exp1 <- preds.exp1$fit + (1.96*preds.exp1$se.fit) # upper bounds
example.data2 <- with(mydata, data.frame(psm_pcf=mean(psm_pcf, na.rm=TRUE), int_pcf=mean(int_pcf, na.rm=TRUE), ext_pcf=mean(ext_pcf, na.rm=TRUE),year_in_gov=mean(year_in_gov, na.rm=TRUE),female=mean(female, na.rm=TRUE), age=mean(age, na.rm=TRUE),white=mean(white, na.rm=TRUE),educ=mean(educ, na.rm=TRUE),staff=mean(staff, na.rm=TRUE), A=1,B=0,C=0))
preds.exp2 <- predict(model.k2, example.data2, type="response", se.fit=TRUE)
predf.exp2 <- preds.exp2$fit # predicted
